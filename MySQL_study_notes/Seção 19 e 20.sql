SEÇÃO 19 e 20 - TRIGGERS, COMM ENTRE BANCOS, AUTO-RELACIONAMENTO

/* TEM QUE MUDAR O DELIMITER */

/* SINTAXE */
CREATE TRIGGER TRIGGER_NAME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW
BEGIN
	QUALQUER COMANDO SQL
END



-- EXEMPLO
CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
);


DELIMITER $

CREATE TRIGGER SALVA_BKP
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN	
	INSERT INTO BKP_USUARIO VALUES 
	(NULL, OLD.IDUSUARIO,OLD.NOME, OLD.LOGIN);
END
$

DELIMITER ;

INSERT INTO USUARIO VALUES(NULL,'ANDRADE','ANDRADE2009','HEXACAMPEAO');

======================== COMM ENTRE BANCOS ======================

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA;


INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON LOJA.PRODUTO
FOR EACH ROW
BEGIN 
		INSERT INTO BACKUP.BKP_PRODUTO 
		VALUES (NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES (NULL, 'TICÃO', 7.77 );

DELETE FROM BACKUP.BKP_PRODUTO
WHERE NOME =' TICÃO';

DELETE FROM PRODUTO
WHERE NOME =' TICÃO';

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON LOJA.PRODUTO
FOR EACH ROW
BEGIN 
		INSERT INTO BACKUP.BKP_PRODUTO 
		VALUES (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR);
END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;


DROP DATABASE LOJA;

DROP DATABASE BACKUP;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
	
);

USE LOJA;

DELIMITER $

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,
	OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');
	
END
$

DELIMITER ;

UPDATE PRODUTO SET VALOR = 110.00
WHERE IDPRODUTO = 4;

========================= AUTO-RELACIONAMENTO ===========================
--EXERCÍCIO

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);

SELECT IDCURSO,
	   NOME, 
	   VALOR, 
	   HORAS, 
	   (SELECT NOME FROM CURSOS 
		WHERE ID_PREREQ = ID_PREREQ)
FROM CURSOS;

SELECT NOME FROM CURSOS 
WHERE ID_PREREQ = 2;

SELECT NOME FROM CURSOS 
WHERE IDCURSO = ID_PREREQ;


SELECT * FROM CURSOS;

CREATE VIEW V_JANELA AS
SELECT NOME, IDCURSO, ID_PREREQ
FROM CURSOS;

SELECT C.NOME,
	   IFNULL(V.NOME, 'NÃO TEM REQUISITO') AS REQUISITO  
FROM CURSOS C
INNER JOIN v_JANELA AS V
ON C.ID_PREREQ = V.IDCURSO
UNION ALL
SELECT NOME,
	   IFNULL (ID_PREREQ, 'NÃO TEM')
FROM CURSOS
WHERE ID_PREREQ IS NULL;
+-----------------------+-----------------------+
| NOME                  | REQUISITO             |
+-----------------------+-----------------------+
| BD RELACIONAL         | BUSINESS INTELLIGENCE |
| BUSINESS INTELLIGENCE | RELATORIOS AVANCADOS  |
| LOGICA PROGRAM        | RUBY                  |
| BD RELACIONAL         | NÃO TEM               |
| LOGICA PROGRAM        | NÃO TEM               |
+-----------------------+-----------------------+



mysql> SELECT * FROM CURSOS;
+---------+-----------------------+-------+--------+-----------+ +---------+-----------------------+-------+--------+-----------+
| IDCURSO | NOME                  | HORAS | VALOR  | ID_PREREQ | | IDCURSO | NOME                  | ID_PREREQ |
+---------+-----------------------+-------+--------+-----------+
|       1 | BD RELACIONAL         |    20 | 400.00 |      NULL | |       1 | BD RELACIONAL         | NULL
|       2 | BUSINESS INTELLIGENCE |    40 | 800.00 |         1 | |       2 | BUSINESS INTELLIGENCE | 1 
|       3 | RELATORIOS AVANCADOS  |    20 | 600.00 |         2 | |       3 | RELATORIOS AVANCADOS  | 2
|       4 | LOGICA PROGRAM        |    20 | 400.00 |      NULL | |       4 | LOGICA PROGRAM        | NULL 
|       5 | RUBY                  |    30 | 500.00 |         4 | |       5 | RUBY                  | 4
+---------+-----------------------+-------+--------+-----------+ +---------+-----------------------+-------+--------+-----------+


SELECT C.NOME,
	   V.NOME AS REQUISITO  
FROM CURSOS C
INNER JOIN v_JANELA AS V
ON V.IDCURSO = C.ID_PREREQ;
+-----------------------+-----------------------+
| NOME                  | REQUISITO             |
+-----------------------+-----------------------+
| BUSINESS INTELLIGENCE | BD RELACIONAL         |
| RELATORIOS AVANCADOS  | BUSINESS INTELLIGENCE |
| RUBY                  | LOGICA PROGRAM        |
+-----------------------+-----------------------+

SELECT C.NOME,
	   IFNULL (V.NOME, 'SEM PRÉ-REQ') AS REQUISITO  
FROM CURSOS C
LEFT JOIN v_JANELA AS V
ON C.IDCURSO = V.ID_PREREQ
ORDER BY C.IDCURSO ASC;
+-----------------------+-----------------------+
| NOME                  | REQUISITO             |
+-----------------------+-----------------------+
| BD RELACIONAL         | BUSINESS INTELLIGENCE |
| BUSINESS INTELLIGENCE | RELATORIOS AVANCADOS  |
| LOGICA PROGRAM        | RUBY                  |
| RELATORIOS AVANCADOS  | SEM PRÉ-REQ           |
| RUBY                  | SEM PRÉ-REQ           |
+-----------------------+-----------------------+